'use client'

import { useState, useEffect, useRef } from 'react'
import { Map, Source, Layer, Popup } from 'react-map-gl'
import 'mapbox-gl/dist/mapbox-gl.css'
import { motion, AnimatePresence } from 'framer-motion'
import { MapPin, Users, TrendingUp, Eye, EyeOff } from 'lucide-react'
import { Button } from '@/components/ui/Button'

interface ZipCodeData {
  zipCode: string
  coordinates: [number, number]
  customerDensity: number
  population: number
  averageIncome: number
  ageRange: string
  topInterests: string[]
}

interface GISMapProps {
  zipCodeData?: ZipCodeData[]
  height?: string
  showControls?: boolean
}

// Sample data for demo - replace with real API data
const sampleZipCodeData: ZipCodeData[] = [
  {
    zipCode: '90210',
    coordinates: [-118.4065, 34.0901],
    customerDensity: 85,
    population: 21733,
    averageIncome: 125000,
    ageRange: '25-44',
    topInterests: ['Luxury Goods', 'Wellness', 'Technology']
  },
  {
    zipCode: '10001',
    coordinates: [-73.9965, 40.7505],
    customerDensity: 92,
    population: 21102,
    averageIncome: 85000,
    ageRange: '25-34',
    topInterests: ['Fashion', 'Food', 'Entertainment']
  },
  {
    zipCode: '94102',
    coordinates: [-122.4194, 37.7749],
    customerDensity: 78,
    population: 19375,
    averageIncome: 110000,
    ageRange: '28-42',
    topInterests: ['Technology', 'Fitness', 'Sustainability']
  },
  {
    zipCode: '60614',
    coordinates: [-87.6298, 41.8781],
    customerDensity: 71,
    population: 24895,
    averageIncome: 75000,
    ageRange: '22-35',
    topInterests: ['Sports', 'Music', 'Food']
  },
  {
    zipCode: '33139',
    coordinates: [-80.1330, 25.7907],
    customerDensity: 83,
    population: 18513,
    averageIncome: 95000,
    ageRange: '26-40',
    topInterests: ['Beach Lifestyle', 'Nightlife', 'Fashion']
  }
]

export function GISMap({ zipCodeData = sampleZipCodeData, height = '500px', showControls = true }: GISMapProps) {
  const [selectedZip, setSelectedZip] = useState<ZipCodeData | null>(null)
  const [showHeatmap, setShowHeatmap] = useState(true)
  const [showDemographics, setShowDemographics] = useState(false)
  const mapRef = useRef<any>(null)

  // Create heat map data
  const heatmapData = {
    type: 'FeatureCollection' as const,
    features: zipCodeData.map(zip => ({
      type: 'Feature' as const,
      properties: {
        density: zip.customerDensity,
        zipCode: zip.zipCode
      },
      geometry: {
        type: 'Point' as const,
        coordinates: zip.coordinates
      }
    }))
  }

  const getDensityColor = (density: number) => {
    if (density >= 80) return '#ef4444' // High density - red
    if (density >= 60) return '#f97316' // Medium-high - orange  
    if (density >= 40) return '#eab308' // Medium - yellow
    if (density >= 20) return '#22c55e' // Low-medium - green
    return '#3b82f6' // Low - blue
  }

  const getDensityRadius = (density: number) => {
    return Math.max(density / 4, 15) // Scale radius based on density
  }

  return (
    <div className="relative">
      <div style={{ height }} className="rounded-xl overflow-hidden border border-white/10">
        <Map
          ref={mapRef}
          mapboxAccessToken={process.env.NEXT_PUBLIC_MAPBOX_TOKEN}
          initialViewState={{
            longitude: -98.5795,
            latitude: 39.8283,
            zoom: 3.5
          }}
          style={{ width: '100%', height: '100%' }}
          mapStyle="mapbox://styles/mapbox/dark-v11"
          interactiveLayerIds={['zip-points']}
          onClick={(event) => {
            const features = event.features
            if (features && features.length > 0) {
              const zipCode = features[0].properties?.zipCode
              const zip = zipCodeData.find(z => z.zipCode === zipCode)
              if (zip) {
                setSelectedZip(zip)
              }
            }
          }}
        >
          {showHeatmap && (
            <Source id="zip-data" type="geojson" data={heatmapData}>
              <Layer
                id="zip-heatmap"
                type="heatmap"
                paint={{
                  'heatmap-weight': ['get', 'density'],
                  'heatmap-intensity': 1,
                  'heatmap-color': [
                    'interpolate',
                    ['linear'],
                    ['heatmap-density'],
                    0, 'rgba(33,102,172,0)',
                    0.2, 'rgb(103,169,207)',
                    0.4, 'rgb(209,229,240)',
                    0.6, 'rgb(253,219,199)',
                    0.8, 'rgb(239,138,98)',
                    1, 'rgb(178,24,43)'
                  ],
                  'heatmap-radius': 60,
                  'heatmap-opacity': 0.7
                }}
              />
              <Layer
                id="zip-points"
                type="circle"
                paint={{
                  'circle-radius': [
                    'interpolate',
                    ['linear'],
                    ['get', 'density'],
                    0, 8,
                    100, 25
                  ],
                  'circle-color': [
                    'case',
                    ['>=', ['get', 'density'], 80], '#ef4444',
                    ['>=', ['get', 'density'], 60], '#f97316',
                    ['>=', ['get', 'density'], 40], '#eab308',
                    ['>=', ['get', 'density'], 20], '#22c55e',
                    '#3b82f6'
                  ],
                  'circle-opacity': 0.8,
                  'circle-stroke-width': 2,
                  'circle-stroke-color': '#ffffff'
                }}
              />
            </Source>
          )}

          {selectedZip && (
            <Popup
              longitude={selectedZip.coordinates[0]}
              latitude={selectedZip.coordinates[1]}
              anchor="bottom"
              onClose={() => setSelectedZip(null)}
              className="custom-popup"
            >
              <div className="glass-card p-4 rounded-lg border border-white/20 min-w-64">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-bold text-primary-50 flex items-center">
                    <MapPin className="w-4 h-4 mr-2 text-accent-400" />
                    ZIP {selectedZip.zipCode}
                  </h3>
                  <div className={`px-2 py-1 rounded text-xs font-medium text-white`}
                       style={{ backgroundColor: getDensityColor(selectedZip.customerDensity) }}>
                    {selectedZip.customerDensity}% Match
                  </div>
                </div>
                
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-primary-300">Population:</span>
                    <span className="text-primary-100 font-medium">{selectedZip.population.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-primary-300">Avg Income:</span>
                    <span className="text-primary-100 font-medium">${selectedZip.averageIncome.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-primary-300">Age Range:</span>
                    <span className="text-primary-100 font-medium">{selectedZip.ageRange}</span>
                  </div>
                </div>

                {showDemographics && (
                  <div className="mt-3 pt-3 border-t border-white/10">
                    <div className="text-xs text-primary-300 mb-2">Top Interests:</div>
                    <div className="flex flex-wrap gap-1">
                      {selectedZip.topInterests.map((interest, index) => (
                        <span key={index} className="px-2 py-1 bg-accent-500/20 text-accent-300 rounded text-xs">
                          {interest}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </Popup>
          )}
        </Map>
      </div>

      {showControls && (
        <div className="absolute top-4 right-4 flex flex-col gap-2">
          <Button
            variant={showHeatmap ? 'primary' : 'ghost'}
            size="sm"
            onClick={() => setShowHeatmap(!showHeatmap)}
            className="backdrop-blur-sm"
          >
            {showHeatmap ? <Eye className="w-4 h-4 mr-2" /> : <EyeOff className="w-4 h-4 mr-2" />}
            Heat Map
          </Button>
          <Button
            variant={showDemographics ? 'primary' : 'ghost'}
            size="sm"
            onClick={() => setShowDemographics(!showDemographics)}
            className="backdrop-blur-sm"
          >
            <Users className="w-4 h-4 mr-2" />
            Demographics
          </Button>
        </div>
      )}

      {/* Legend */}
      <div className="absolute bottom-4 left-4 glass-card p-3 rounded-lg border border-white/10">
        <div className="text-sm font-medium text-primary-100 mb-2">Customer Density</div>
        <div className="flex items-center gap-3 text-xs">
          {[
            { color: '#ef4444', label: 'High (80%+)' },
            { color: '#f97316', label: 'Med-High (60-79%)' },
            { color: '#eab308', label: 'Medium (40-59%)' },
            { color: '#22c55e', label: 'Med-Low (20-39%)' },
            { color: '#3b82f6', label: 'Low (<20%)' }
          ].map((item, index) => (
            <div key={index} className="flex items-center gap-1">
              <div 
                className="w-3 h-3 rounded-full" 
                style={{ backgroundColor: item.color }}
              />
              <span className="text-primary-300">{item.label}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}